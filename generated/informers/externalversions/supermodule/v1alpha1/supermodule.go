// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	apissupermodulev1alpha1 "kek/apis/supermodule/v1alpha1"
	clientset "kek/generated/clientset"
	internalinterfaces "kek/generated/informers/externalversions/internalinterfaces"
	supermodulev1alpha1 "kek/generated/listers/supermodule/v1alpha1"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SuperModuleInformer provides access to a shared informer and lister for
// SuperModules.
type SuperModuleInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() supermodulev1alpha1.SuperModuleLister
}

type superModuleInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewSuperModuleInformer constructs a new informer for SuperModule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSuperModuleInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSuperModuleInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredSuperModuleInformer constructs a new informer for SuperModule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSuperModuleInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpV1alpha1().SuperModules(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpV1alpha1().SuperModules(namespace).Watch(context.TODO(), options)
			},
		},
		&apissupermodulev1alpha1.SuperModule{},
		resyncPeriod,
		indexers,
	)
}

func (f *superModuleInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSuperModuleInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *superModuleInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apissupermodulev1alpha1.SuperModule{}, f.defaultInformer)
}

func (f *superModuleInformer) Lister() supermodulev1alpha1.SuperModuleLister {
	return supermodulev1alpha1.NewSuperModuleLister(f.Informer().GetIndexer())
}
