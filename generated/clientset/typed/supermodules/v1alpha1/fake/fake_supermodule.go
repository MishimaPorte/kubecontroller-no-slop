// Code generated by main. DO NOT EDIT.

package fake

import (
	context "context"
	v1alpha1 "kek/apis/supermodule/v1alpha1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSuperModules implements SuperModuleInterface
type FakeSuperModules struct {
	Fake *FakeSpV1alpha1
	ns   string
}

var supermodulesResource = v1alpha1.SchemeGroupVersion.WithResource("supermodules")

var supermodulesKind = v1alpha1.SchemeGroupVersion.WithKind("SuperModule")

// Get takes name of the superModule, and returns the corresponding superModule object, and an error if there is any.
func (c *FakeSuperModules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.SuperModule, err error) {
	emptyResult := &v1alpha1.SuperModule{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(supermodulesResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.SuperModule), err
}

// List takes label and field selectors, and returns the list of SuperModules that match those selectors.
func (c *FakeSuperModules) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.SuperModuleList, err error) {
	emptyResult := &v1alpha1.SuperModuleList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(supermodulesResource, supermodulesKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SuperModuleList{ListMeta: obj.(*v1alpha1.SuperModuleList).ListMeta}
	for _, item := range obj.(*v1alpha1.SuperModuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested superModules.
func (c *FakeSuperModules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(supermodulesResource, c.ns, opts))

}

// Create takes the representation of a superModule and creates it.  Returns the server's representation of the superModule, and an error, if there is any.
func (c *FakeSuperModules) Create(ctx context.Context, superModule *v1alpha1.SuperModule, opts v1.CreateOptions) (result *v1alpha1.SuperModule, err error) {
	emptyResult := &v1alpha1.SuperModule{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(supermodulesResource, c.ns, superModule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.SuperModule), err
}

// Update takes the representation of a superModule and updates it. Returns the server's representation of the superModule, and an error, if there is any.
func (c *FakeSuperModules) Update(ctx context.Context, superModule *v1alpha1.SuperModule, opts v1.UpdateOptions) (result *v1alpha1.SuperModule, err error) {
	emptyResult := &v1alpha1.SuperModule{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(supermodulesResource, c.ns, superModule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.SuperModule), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSuperModules) UpdateStatus(ctx context.Context, superModule *v1alpha1.SuperModule, opts v1.UpdateOptions) (result *v1alpha1.SuperModule, err error) {
	emptyResult := &v1alpha1.SuperModule{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(supermodulesResource, "status", c.ns, superModule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.SuperModule), err
}

// Delete takes name of the superModule and deletes it. Returns an error if one occurs.
func (c *FakeSuperModules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(supermodulesResource, c.ns, name, opts), &v1alpha1.SuperModule{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSuperModules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(supermodulesResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.SuperModuleList{})
	return err
}

// Patch applies the patch and returns the patched superModule.
func (c *FakeSuperModules) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.SuperModule, err error) {
	emptyResult := &v1alpha1.SuperModule{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(supermodulesResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.SuperModule), err
}
